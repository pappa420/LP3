*********************knapsack Theory**************************

Overview:

Given the weights and values of N items, put these items in a knapsack of capacity W to get the maximum total
value in the knapsack. In Fractional Knapsack, we can break items for maximizing the total value of the
knapsack
Note: In the 0-1 Knapsack problem, we are not allowed to break items. We either take the whole item or don‘t
take it.
An efficient solution is to use the Greedy approach. The basic idea of the greedy approach is to calculate the
ratio value/weight for each item and sort the item on the basis of this ratio. Then take the item with the highest
ratio and add them until we can‘t add the next item as a whole and at the end add the next item as much as we
can which will always be the optimal solution to this problem.


Time Complexity= O(nlogn)


Here's a breakdown of the code:

Item class:

Item class represents items with attributes such as weight, value, and value per weight (which is calculated as the value divided by the weight). This ratio is used to determine the most valuable items concerning their weight.
knapsack_fractional function:

The function takes a list of items and the capacity of the knapsack as input.
It sorts the items based on their value-to-weight ratio in descending order, ensuring the most valuable items are considered first.
It initializes total_value as 0 and an empty knapsack list to keep track of the selected items and their respective fractions.
It iterates through the sorted items and adds them to the knapsack until the knapsack's capacity is reached or no more items are available.
For each item, it calculates the fraction of the item's weight to be added to the knapsack based on the remaining capacity. It considers the entire item if the remaining capacity is greater than the item's weight.
It updates the total_value by adding the value of the selected fraction of the item.
The function returns the total value in the knapsack and the list of selected items with their respective fractions.
main function:

The main function prompts the user to enter the number of items and their weights and values.
It creates a list of Item objects based on the user input and stores them in the items list.
It also prompts the user to input the capacity of the knapsack.
It then calls the knapsack_fractional function with the list of items and the knapsack capacity.
Finally, it prints the items selected for the knapsack along with their respective fractions and the total value present in the knapsack.

