*************************N Queen Theory***********************

Overview:
The N-Queens problem aims to place N chess queens on an NÃ—N chessboard so that no two queens attack each other. The algorithm uses a backtracking approach to find a valid placement for the queens on the board.
Backtracking Algorithm
The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a
queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for
which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to
clashes, then we backtrack and return false.
1) Start in the leftmost column
2) If all queens are placed
return true
3) Try all rows in the current column.
Do following for every tried row.
a) If the queen can be placed safely in this row
then mark this [row, column] as part of the
solution and recursively check if placing
the queen here leads to a solution.
b) If placing the queen in [row, column] leads to
a solution then return true.
c) If placing queen doesn't lead to a solution then
unmark this [row, column] (Backtrack) and go to
step (a) to try other rows.
4) If all rows have been tried and nothing worked,
return false to trigger backtracking.


Time Complexity: O(N!)



Here's a concise explanation of the code:

is_safe function:

is_safe checks if it's safe to place a queen at a given position on the board (denoted by row and col indices).
It verifies if placing a queen at that position would conflict with other queens already placed on the board, horizontally, diagonally, or anti-diagonally.
solve_n_queens function:

solve_n_queens recursively attempts to place queens on the board in a column-wise manner (starting from col).
It checks if it's safe to place a queen in a specific column and proceeds to the next column.
If it finds a valid arrangement, it returns True.
If the current arrangement doesn't lead to a solution, it backtracks by resetting the last placed queen (board[i][col] = 0) and tries a different position.
print_board function:

print_board prints the final placement of queens on the board as 'Q' in their respective positions.
main function:

The user inputs the size of the chessboard n and the column index for the first queen.
A 2D list board representing the chessboard is initialized.
The first queen is placed at the specified column index in the first row.
The solve_n_queens function is called to find a solution for placing N queens, starting from the second column.
If a solution exists, it prints the N-Queens matrix; otherwise, it displays a message indicating that no solution exists for the given configuration.